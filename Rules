#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.


preprocess do
    all_tags.each do |tag|
        items << Nanoc::Item.new(
            "",
            { :tag => tag },
            "/tags/#{slug(tag)}/"
        )
    end
end

compile '/' do
    filter :erb
    layout 'page'
    filter :cache_buster
end

compile '/posts/*' do
    filter :kramdown
    layout 'post'
    filter :cache_buster
end

compile '/tags/*/' do
    filter :erb
    layout 'tags'
    filter :cache_buster
end

compile '/atom/' do
    filter :erb
    filter :cache_buster
end

compile '*' do
    if item[:extension] == 'scss'
        filter :cache_buster
        filter :sass, :syntax => :scss
    elsif item.binary? or ['css', 'txt'].include? item[:extension]
        # do nothing
    elsif ['md', 'markdown'].include? item[:extension]
        filter :kramdown
        layout 'default'
        filter :cache_buster
    elsif item[:extension] == 'js'
        filter :uglify_js
    else
        filter :erb
        layout 'default'
        filter :cache_buster
    end
end

route '/keybase/' do
    '/keybase.txt'
end

route '/robots/' do
    '/robots.txt'
end

route "/posts/*" do
    post_slug = slug /([^\/]+)\/?$/.match(item.identifier).captures[0]
    year = attribute_to_time(@item[:created_at]).year

    "/#{year}/#{post_slug}/index.html"
end

route '/atom/' do
    '/atom.xml'
end

route '*' do
    if ['css', 'txt', 'png'].include? item[:extension]
        item.identifier.chop + fingerprint(item[:filename]) + '.' + item[:extension]
    elsif item.binary?
        if item[:extension]
            item.identifier.chop + '.' + item[:extension]
        else
            item.identifier.chop
        end
    elsif item[:extension] == 'scss'
        if item.identifier[1] == '_'
            nil
        else
            item.identifier.chop + fingerprint(item[:filename]) + '.css'
        end
    elsif item[:extension] == 'js'
        item.identifier.chop + fingerprint(item[:filename]) + '.js'
    else
        item.identifier + 'index.html'
    end
end

layout '*', :erb
